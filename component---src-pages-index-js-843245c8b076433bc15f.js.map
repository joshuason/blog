{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Index","posts","data","allMarkdownRemark","edges","useState","activeTags","setActiveTags","className","filter","post","length","node","frontmatter","tags","every","val","includes","title","filterOptions","map","key","id","to","path","date","tag","ind","TagItem","active","onClick","tagName","arr","indexOf","splice","removeItemFromArr","excerpt","pageQuery"],"mappings":"wkCAOe,SAASA,EAAT,GAA0B,IACxBC,EADuB,EAARC,KACAC,kBAAtBC,MAD8B,EAEFC,mBAAS,IAAtCC,EAF+B,KAEnBC,EAFmB,KAuBtC,OACE,yBAAKC,UAAU,cACZP,EACEQ,QAAO,SAAAC,GAAI,OAbI,SAAAA,GACpB,OAAKJ,EAAWK,SAELD,EAAKE,KAAKC,YAAYC,MACxBR,EAAWS,OAAM,SAAAC,GAAG,OAAIN,EAAKE,KAAKC,YAAYC,KAAKG,SAASD,MAF5DN,EAAKE,KAAKC,YAAYK,MAAMP,OAAS,EAW1BQ,CAAcT,MAC7BU,KAAI,gBAASV,EAAT,EAAGE,KAAH,OACH,yBAAKJ,UAAU,oBAAoBa,IAAKX,EAAKY,IAC3C,4BACE,kBAAC,OAAD,CAAMC,GAAIb,EAAKG,YAAYW,MACxBd,EAAKG,YAAYK,MAAO,IACzB,8BACG,KACAR,EAAKG,YAAYY,QAIvBf,EAAKG,YAAYC,MAChB,uBAAGN,UAAU,WACVE,EAAKG,YAAYC,KAAKM,KAAI,SAACM,EAAKC,GAAN,OACzB,kBAACC,EAAD,CACEP,IAAKM,EACLD,IAAKA,EACLG,SAAQvB,EAAWW,SAASS,GAC5BI,QAAS,kBAzCPC,EAyCyBL,OAvCtCpB,EAAWW,SAASc,GAGvBxB,EAAc,EAwDpB,SAA2ByB,EAAKhB,GAC9B,IAAMW,EAAMK,EAAIC,QAAQjB,GAIxB,OAHIW,GAAO,GACTK,EAAIE,OAAOP,EAAK,GAEXK,EA7DeG,CAAkB7B,EAAYyB,KAFhDxB,EAAc,GAAD,SAAKD,GAAL,CAAiByB,MAHd,IAAAA,SA8CV,2BAAIrB,EAAK0B,cAOrB,SAASR,EAAT,GAA4C,IAAzBF,EAAwB,EAAxBA,IAAKG,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAC9B,OACE,4BAAQtB,UAAWqB,EAAS,aAAe,MAAOC,QAASA,GAA3D,IACIJ,GAwBD,IAAMW,EAAS","file":"component---src-pages-index-js-843245c8b076433bc15f.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n//import Helmet from \"react-helmet\"\n\nimport \"../css/index.css\"\n//import { array } from \"prop-types\"\n\nexport default function Index({ data }) {\n  const { edges: posts } = data.allMarkdownRemark\n  const [activeTags, setActiveTags] = useState([])\n\n  const handleClick = tagName => {\n    //console.log(tagName)\n    if (!activeTags.includes(tagName)) {\n      setActiveTags([...activeTags, tagName])\n    } else {\n      setActiveTags([...removeItemFromArr(activeTags, tagName)])\n    }\n  }\n\n  const filterOptions = post => {\n    if (!activeTags.length) {\n      return post.node.frontmatter.title.length > 0\n    } else if (post.node.frontmatter.tags) {\n      return activeTags.every(val => post.node.frontmatter.tags.includes(val))\n    } else {\n      return false\n    }\n  }\n\n  return (\n    <div className=\"blog-posts\">\n      {posts\n        .filter(post => filterOptions(post))\n        .map(({ node: post }) => (\n          <div className=\"blog-post-preview\" key={post.id}>\n            <h1>\n              <Link to={post.frontmatter.path}>\n                {post.frontmatter.title}{\" \"}\n                <span>\n                  {\"/ \"}\n                  {post.frontmatter.date}\n                </span>\n              </Link>\n            </h1>\n            {post.frontmatter.tags && (\n              <p className=\"tagline\">\n                {post.frontmatter.tags.map((tag, ind) => (\n                  <TagItem\n                    key={ind}\n                    tag={tag}\n                    active={activeTags.includes(tag) ? true : false}\n                    onClick={() => handleClick(tag)}\n                  />\n                ))}\n              </p>\n            )}\n            <p>{post.excerpt}</p>\n          </div>\n        ))}\n    </div>\n  )\n}\n\nfunction TagItem({ tag, active, onClick }) {\n  return (\n    <button className={active ? \"tag active\" : \"tag\"} onClick={onClick}>\n      #{tag}\n    </button>\n  )\n}\n\nfunction removeItemFromArr(arr, val) {\n  const ind = arr.indexOf(val)\n  if (ind > -1) {\n    arr.splice(ind, 1)\n  }\n  return arr\n}\n\n// // both args are arrays\n// function containsAll(arr, vals) {\n//   vals.forEach(val => {\n//     console.log(arr, val, !arr.includes(val))\n//     if (!arr.includes(val)) {\n//       return false\n//     }\n//   })\n//   return true\n// }\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            blurb\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}